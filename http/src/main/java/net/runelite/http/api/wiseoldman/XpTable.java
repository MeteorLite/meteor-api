package net.runelite.http.api.wiseoldman;

import java.util.Arrays;

public enum XpTable {
  LVL1(1, 0, 83),
  LVL2(2, 83, 91),
  LVL3(3, 174, 102),
  LVL4(4, 276, 112),
  LVL5(5, 388, 124),
  LVL6(6, 512, 138),
  LVL7(7, 650, 168),
  LVL8(8, 801, 168),
  LVL9(9, 969, 185),
  LVL10(10, 1154, 204),
  LVL11(11, 1358, 226),
  LVL12(12, 1584, 249),
  LVL13(13, 1833, 274),
  LVL14(14, 2107, 304),
  LVL15(15, 2411, 335),
  LVL16(16, 2746, 369),
  LVL17(17, 3115, 408),
  LVL18(18, 3523, 450),
  LVL19(19, 3973, 497),
  LVL20(20, 4470, 548),
  LVL21(21, 5018, 606),
  LVL22(22, 5624, 667),
  LVL23(23, 6291, 737),
  LVL24(24, 7028, 814),
  LVL25(25, 7842, 898),
  LVL26(26, 8740, 990),
  LVL27(27, 9730, 1094),
  LVL28(28, 10824, 1207),
  LVL29(29, 12031, 1332),
  LVL30(30, 13363, 1470),
  LVL31(31, 14833, 1623),
  LVL32(32, 16456, 1791),
  LVL33(33, 18247, 1977),
  LVL34(34, 20224, 2182),
  LVL35(35, 22406, 2409),
  LVL36(36, 24815, 2658),
  LVL37(37, 27473, 2935),
  LVL38(38, 30408, 3240),
  LVL39(39, 33648, 3576),
  LVL40(40, 37224, 3947),
  LVL41(41, 41171, 4358),
  LVL42(42, 45529, 4810),
  LVL43(43, 50339, 5310),
  LVL44(44, 55649, 5863),
  LVL45(45, 61512, 6471),
  LVL46(46, 67983, 7144),
  LVL47(47, 75127, 7887),
  LVL48(48, 83014, 8707),
  LVL49(49, 91721, 9612),
  LVL50(50, 101333, 10612),
  LVL51(51, 111945, 11715),
  LVL52(52, 123660, 12934),
  LVL53(53, 136594, 14278),
  LVL54(54, 150872, 15764),
  LVL55(55, 166636, 17404),
  LVL56(56, 184040, 19214),
  LVL57(57, 203254, 21212),
  LVL58(58, 224466, 23420),
  LVL59(59, 247886, 25856),
  LVL60(60, 273742, 28546),
  LVL61(61, 302288, 31516),
  LVL62(62, 333804, 34795),
  LVL63(63, 368599, 38416),
  LVL64(64, 407015, 42413),
  LVL65(65, 449428, 46826),
  LVL66(66, 496254, 51699),
  LVL67(67, 547953, 57079),
  LVL68(68, 605032, 63019),
  LVL69(69, 668051, 69576),
  LVL70(70, 737627, 76818),
  LVL71(71, 814445, 84812),
  LVL72(72, 899257, 93638),
  LVL73(73, 992895, 103383),
  LVL74(74, 1096278, 114143),
  LVL75(75, 1210421, 126022),
  LVL76(76, 1336443, 139138),
  LVL77(77, 1475581, 153619),
  LVL78(78, 1629200, 169608),
  LVL79(79, 1798808, 187260),
  LVL80(80, 1986068, 206750),
  LVL81(81, 2192818, 228269),
  LVL82(82, 2421087, 252027),
  LVL83(83, 2673114, 278259),
  LVL84(84, 2951373, 307221),
  LVL85(85, 3258594, 339198),
  LVL86(86, 3597792, 374502),
  LVL87(87, 3972294, 413482),
  LVL88(88, 4385776, 456519),
  LVL89(89, 4842295, 504037),
  LVL90(90, 5346332, 556499),
  LVL91(91, 5902831, 614422),
  LVL92(92, 6517253, 678376),
  LVL93(93, 7195629, 748985),
  LVL94(94, 7944614, 826944),
  LVL95(95, 8771558, 913019),
  LVL96(96, 9684577, 1008052),
  LVL97(97, 10692629, 1112977),
  LVL98(98, 11805606, 1228825),
  LVL99(99, 13034431, 1356729),
  LVL100(100, 14391160, 1497949),
  LVL101(101, 15889109, 1653867),
  LVL102(102, 17542976, 1826016),
  LVL103(103, 19368992, 2016081),
  LVL104(104, 21385073, 2225933),
  LVL105(105, 23611006, 2457626),
  LVL106(106, 26068632, 2713437),
  LVL107(107, 28782069, 2995874),
  LVL108(108, 31777943, 3307711),
  LVL109(109, 35085654, 3652007),
  LVL110(110, 38737661, 4032140),
  LVL111(111, 42769801, 4451840),
  LVL112(112, 47221641, 4915228),
  LVL113(113, 52136869, 5426849),
  LVL114(114, 57563718, 5991725),
  LVL115(115, 63555443, 6615397),
  LVL116(116, 70170840, 7303988),
  LVL117(117, 77474828, 8064254),
  LVL118(118, 85539082, 8903655),
  LVL119(119, 94442737, 9830430),
  LVL120(120, 104273167, 10853671),
  LVL121(120, 115126838, 11983422),
  LVL122(120, 127110260, 13230768),
  LVL123(120, 140341028, 14607949),
  LVL124(120, 154948977, 16128480),
  LVL125(120, 171077457, 17807283),
  LVL126(120, 188884740, 11115260),
  LVL_MAX(120, 200000000, 1);
  public int startXP;
  public int neededXP;
  public int lvl;

  XpTable(int lvl, int startXP, int neededXP) {
    this.lvl = lvl;
    this.startXP = startXP;
    this.neededXP = neededXP;
  }

  public static XpTable of(int xp) {
    return Arrays.stream(values())
        .filter(option -> option.getStartXP() <= xp)
        .filter(option -> (option.getNeededXP() + option.getStartXP()) > xp)
        .findFirst()
        .orElse(LVL1);
  }

  public int getLvl() {
    return lvl;
  }

  public int getStartXP() {
    return startXP;
  }

  public int getNeededXP() {
    return neededXP;
  }
}
